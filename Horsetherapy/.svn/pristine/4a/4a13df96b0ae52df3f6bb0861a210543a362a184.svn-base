package sepm.ss13.e0828.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

import net.miginfocom.swing.MigLayout;
import sepm.ss13.e0828.domain.Horse;
import sepm.ss13.e0828.domain.Horse.Therapytype;
import sepm.ss13.e0828.service.TherapyManagementService;

public class HorseManager extends JPanel {



	private TherapyManagementService servicelayer = null;
	private List<Horse> horses = null;

	/*================UI components======================= */
	/* panels */
	private JPanel panSearch = null;
	private JPanel panSearchControl = null;
	private JPanel panHorseOperation = null;
	private JPanel panCartOperation = null;
	private JPanel panHorseInformation = null;
	private JPanel panCenter = null;
	private JPanel panEast = null;
	private JScrollPane panHorseList = null;

	/* textfields */
	private JTextField txtSearchName = null;
	private JTextField txtSearchPrice = null;
	private JTextField txtSearchHorseID = null;

	private JTextField txtHorseName = null;
	private JTextField txtHorsePrice = null;
	private JTextField txtHorseTherapytype = null;
	private JTextField txtTherapyDuration = null;
	
	/* labels */
	private JLabel lblSearchName = null;
	private JLabel lblSearchPrice = null;
	private JLabel lblSearchHorseID = null;
	private JLabel lblSearchTherapyType = null;
	private JLabel lblPicture = null;
	
	private JLabel lblHorseName = null;
	private JLabel lblTherapytype = null;
	private JLabel lblPriceperHour = null;
	private JLabel lblTherapyduration = null;
	
	/* buttons */
	private JButton btnSearch = null;
	private JButton btnSearchTherapy = null;
	private JButton btnReset = null;
	private JButton btnNewHorse = null;
	private JButton btnDeleteHorse = null;
	private JButton btnAddToCart = null;
	private JButton btnCheckout = null;
	private JButton btnUpdateHorse = null;

	/* list fields */
	private JComboBox cmbTherapytypes = null;

	/* Table */
	private JTable tabHorselist = null;
	private DefaultTableModel tabModel = null;

	private Image horsePicture = null;

	public HorseManager(TherapyManagementService service){
		this.servicelayer = service;
		this.init();
		this.listAllHorses();
	}

	private void init() {

		this.setLayout(new MigLayout());
		this.add(createCenterPanel(), BorderLayout.CENTER);
		this.add(createEastPanel(), BorderLayout.EAST);
	}

	private JPanel createCenterPanel(){
		if( panCenter == null ){
			panCenter = new JPanel(new MigLayout("wrap","[center]","[][][]"));

			panCenter.add(createSearchPane(),"growx");
			panCenter.add(createHorseListPane(),"growx,height 500");
			panCenter.add(createHorseOperationPane(),"right");
		}
		return panCenter;

	}

	private JPanel createSearchPane(){
		if( panSearch == null ){
			panSearch = new JPanel(new MigLayout("wrap 2","[][]"));
			panSearch.setBorder(BorderFactory.createTitledBorder("Pferdefilter"));

			this.lblSearchHorseID = new JLabel(HorseManagerConfig.LBLHORSEID);
			this.lblSearchName = new JLabel(HorseManagerConfig.LBLHORSENAME);
			this.lblSearchPrice = new JLabel(HorseManagerConfig.LBLHORSEPRICE);
			this.lblSearchTherapyType = new JLabel(HorseManagerConfig.LBLTHERAPYTYPE);


			this.txtSearchHorseID = new JTextField();
			this.txtSearchName = new JTextField();
			this.txtSearchPrice = new JTextField();

			this.cmbTherapytypes = new TherapytypeCombo();
			
			panSearch.add(lblSearchHorseID);
			panSearch.add(txtSearchHorseID,"growx");
			panSearch.add(lblSearchName);
			panSearch.add(txtSearchName,"growx");
			panSearch.add(lblSearchPrice);
			panSearch.add(txtSearchPrice,"growx");
			panSearch.add(lblSearchTherapyType);
			panSearch.add(cmbTherapytypes, "growx");
			panSearch.add(createSearchControlPane(), "span");

		}	
		return panSearch;
	}

	private JPanel createSearchControlPane(){
		if( panSearchControl == null ){
			panSearchControl = new JPanel( new MigLayout() );
			btnReset = new JButton(HorseManagerConfig.BTNRESET);
			btnSearch = new JButton(HorseManagerConfig.BTNSEARCH);
			btnSearchTherapy = new JButton(HorseManagerConfig.BTNSEARCHTHERAPY);
			
			panSearchControl.add(btnReset,"sg 1");
			panSearchControl.add(btnSearchTherapy,"sg 1");
			panSearchControl.add(btnSearch, "sg 1");


			btnReset.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
				
				}
			});

			btnSearchTherapy.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {


				}
			});

			btnSearch.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {

				}
			});


		}

		return panSearchControl;

	}

	private JScrollPane createHorseListPane(){
		if( panHorseList == null ){

			tabHorselist =new JTable();
			tabModel = new DefaultTableModel(HorseManagerConfig.HORSELISTHEADERS,0){

				@Override
				public boolean isCellEditable(int row, int column){
					return false;
				}

			};

			tabHorselist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			tabHorselist.setModel(tabModel);
			tabHorselist.setPreferredScrollableViewportSize(new Dimension(500, 70));
			tabHorselist.setFillsViewportHeight(true);

			panHorseList = new JScrollPane(tabHorselist);
			panHorseList.setBorder(BorderFactory.createLoweredBevelBorder());
		}

		return panHorseList;
	}
	
	private Component createHorseOperationPane() {
		if( panHorseOperation == null){
			panHorseOperation = new JPanel(new MigLayout());
			btnNewHorse = new JButton(HorseManagerConfig.BTNNEWHORSE);
			btnDeleteHorse = new JButton(HorseManagerConfig.BTNDELHORSE);
			btnUpdateHorse = new JButton(HorseManagerConfig.BTNUPDATEHORSE);

			btnNewHorse.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {
					openCreateHorseDialog();

				}
			});

			btnDeleteHorse.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					// TODO Auto-generated method stub

				}
			});
			
			btnUpdateHorse.addActionListener(new ActionListener() {
				
				@Override
				public void actionPerformed(ActionEvent arg0) {
					openUpdateHorseDialog( );
					
				}
			});

			panHorseOperation.add(btnDeleteHorse, "sg 1");
			panHorseOperation.add(btnUpdateHorse, "sg 1");
			panHorseOperation.add(btnNewHorse, "sg 1");
		}
		return panHorseOperation;
	}

	private void openUpdateHorseDialog() {
		// TODO Auto-generated method stub
		
	}

	private void openCreateHorseDialog() {
		Horse newHorse = null;
		new HorseDialog(newHorse, servicelayer, false).setVisible(true);
		if( newHorse != null ){
			//TODO perform table update
		}
		
	}

	private JPanel createEastPanel(){
		if( panEast == null ){
			panEast = new JPanel(new MigLayout( "",               
				      "[]",             
				      "[]:push[]"));
			
			panEast.setBorder(BorderFactory.createTitledBorder("Therapieeinheiten"));
			panEast.add(createHorseInformationPane(),"wrap,center");
			panEast.add(createCartControlPane());

		}
		return panEast;
	}

	private Component createHorseInformationPane() {
		if( panHorseInformation == null ){

			panHorseInformation = new JPanel( new MigLayout("wrap",""));
			try {
				JPanel picpane = new JPanel();
				lblPicture = new JLabel();
				lblPicture.setPreferredSize(new Dimension(HorseManagerConfig.PICTUREHEIGHT,HorseManagerConfig.PICTUREWIDTH));
				
				horsePicture = ImageIO.read(new File(HorseManagerConfig.HORSEPICTUREPATH + HorseManagerConfig.PATHTODUMMYPIC));
				horsePicture = horsePicture.getScaledInstance(200, 200, Image.SCALE_AREA_AVERAGING);
				lblPicture.setIcon(new ImageIcon(horsePicture));
				
				picpane.add(lblPicture);
				panHorseInformation.add(picpane, "grow,center");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			lblHorseName = new JLabel(HorseManagerConfig.HORSENAME);
			lblTherapytype = new JLabel(HorseManagerConfig.HORSETHERAPYTYPE);
			lblPriceperHour = new JLabel(HorseManagerConfig.HORSEPRICE);
			lblTherapyduration = new JLabel(HorseManagerConfig.HORSEDURATION);
			
			txtHorseName = new JTextField();
			txtHorsePrice = new JTextField();
			txtHorseTherapytype = new JTextField();
			txtTherapyDuration = new JTextField();
			
			txtHorseName.setEnabled(false);
			txtHorsePrice.setEnabled(false);
			txtHorseTherapytype.setEnabled(false);
			
			panHorseInformation.add(lblHorseName);
			panHorseInformation.add(txtHorseName,"grow");
			
			panHorseInformation.add(lblTherapytype);
			panHorseInformation.add(txtHorseTherapytype,"grow");
			
			panHorseInformation.add(lblPriceperHour);
			panHorseInformation.add(txtHorsePrice,"grow");

			panHorseInformation.add(lblTherapyduration);
			panHorseInformation.add(txtTherapyDuration,"grow");

			
		}
		return panHorseInformation;
	}
	
	private Component createCartControlPane() {
		if(panCartOperation == null ){
			panCartOperation = new JPanel( new MigLayout() );
			btnAddToCart = new JButton(HorseManagerConfig.ADDTOCART);
			btnCheckout = new JButton(HorseManagerConfig.CHECKOUT);
			
			btnAddToCart.addActionListener(new ActionListener() {
				
				@Override
				public void actionPerformed(ActionEvent arg0) {
					// TODO Auto-generated method stub
					
				}
			});
			
			btnCheckout.addActionListener(new ActionListener() {
				
				@Override
				public void actionPerformed(ActionEvent e) {
					// TODO Auto-generated method stub
					
				}
			});
			
			panCartOperation.add(btnAddToCart);
			panCartOperation.add(btnCheckout);
		}
		return panCartOperation;
	}

	private void listAllHorses() {
		horses = this.servicelayer.listAllHorses();
		fillTableWithData(horses);
	}

	private void fillTableWithData(List<Horse> horses) {
		tabModel.setRowCount(0);
		Object[] values = new Object[HorseManagerConfig.HORSELISTCOLS];

		for( Horse h : horses ){
			values[0] = h.getHorseName();
			values[1] = h.getHorseTherapytype().getText();
			values[2] = h.getHorseTherapyprice();
			values[3] = h.getUsage();
			tabModel.addRow(values);
		}
	}
}
