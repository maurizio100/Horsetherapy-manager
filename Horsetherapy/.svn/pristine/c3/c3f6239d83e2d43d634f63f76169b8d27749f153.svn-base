package sepm.ss13.e0828.service;

import java.util.List;

import org.apache.log4j.Logger;

import sepm.ss13.e0828.dao.Connector;
import sepm.ss13.e0828.dao.DBHorseDAO;
import sepm.ss13.e0828.dao.exceptions.HorseNotExistentException;
import sepm.ss13.e0828.dao.exceptions.InvoiceNotExistentException;
import sepm.ss13.e0828.dao.exceptions.NoClassGivenException;
import sepm.ss13.e0828.dao.exceptions.PersistenceException;
import sepm.ss13.e0828.dao.exceptions.UnacceptedValueException;
import sepm.ss13.e0828.domain.Horse;
import sepm.ss13.e0828.domain.HorseQueryData;
import sepm.ss13.e0828.domain.Invoice;
import sepm.ss13.e0828.service.exception.LessValuesException;
import sepm.ss13.e0828.service.exception.LessInvoiceValuesException;
import sepm.ss13.e0828.service.exception.NoHorseIdException;
import sepm.ss13.e0828.service.exception.NoInvoiceIDException;
import sepm.ss13.e0828.service.exception.NoTherapytypeGivenException;
import sepm.ss13.e0828.service.exception.NoUpdateValuesException;

public class TherapyService implements TherapyManagementService {

	private static final String LAYER = "Servicelayer";
	private Logger logger = Logger.getLogger(TherapyService.class);
	
	private TherapyDaoManager therapyDaoManager = null;
	private static TherapyManagementService service = new TherapyService();

	private HorseValidator horseval = new HorseValidator();
	private InvoiceValidator invoiceval = new InvoiceValidator();

	private TherapyService(){ therapyDaoManager = new TherapyDBManager(); }

	@Override
	public void createHorse(HorseQueryData newHorse) throws LessValuesException {
		try {
			if( horseval.validateHorse(newHorse) ){
				therapyDaoManager.getHorsedao().createHorse(newHorse);
			}else{
				throw new LessValuesException();
			}
		} catch (PersistenceException e) {
			announcePersistenceError(e);

		} catch (NoClassGivenException e) {
			announcePersistenceError(e);

		} catch (UnacceptedValueException e) {
			announcePersistenceError(e);
		
		}

	}

	@Override
	public void updateHorse(HorseQueryData queryValues)
			throws NoUpdateValuesException {
		try {
			if( horseval.validateHorseupdate(queryValues) ){
				therapyDaoManager.getHorsedao().updateHorse(queryValues);
			}else{
				throw new NoUpdateValuesException();
			}
		} catch (PersistenceException e) {
			announcePersistenceError(e);
		} catch (NoClassGivenException e) {
			announcePersistenceError(e);
		} catch (HorseNotExistentException e) {
			announcePersistenceError(e);
		} catch (UnacceptedValueException e) {
			announcePersistenceError(e);
		}
	}

	@Override
	public void deleteHorse(HorseQueryData deleteHorse)
			throws NoHorseIdException {

		try {
			if( horseval.validateHorsedelete(deleteHorse) ){
				therapyDaoManager.getHorsedao().deleteHorse(deleteHorse);
			}else{
				throw new NoHorseIdException();
			}
		} catch (PersistenceException e) {
			announcePersistenceError(e);

		} catch (NoClassGivenException e) {
			announcePersistenceError(e);
		} catch (HorseNotExistentException e) {
			announcePersistenceError(e);
		}

	}

	@Override
	public List<Horse> searchHorse(HorseQueryData searchValues) {
		List<Horse> horses = null;

		try {
			if( searchValues != null ){
				horses = therapyDaoManager.getHorsedao().getHorsesBy(searchValues);
			}
		} catch (PersistenceException e) {
			announcePersistenceError(e);

		} catch (NoClassGivenException e) {
			announcePersistenceError(e);
		}
		return horses;
	}

	@Override
	public List<Horse> listHorsebyTherapy(HorseQueryData queryValues)
			throws NoTherapytypeGivenException {

		List<Horse> horses = null;

		try {
			if( horseval.validateHorseTherapySelection(queryValues) ){
				horses = therapyDaoManager.getHorsedao().getHorsesByUsage(queryValues);
			}
		} catch (PersistenceException e) {
			announcePersistenceError(e);
		} catch (NoClassGivenException e) {
			announcePersistenceError(e);
		}

		return horses;
	}

	@Override
	public List<Horse> listAllHorses() {
		List<Horse> horses = null;

		try {
			horses = therapyDaoManager.getHorsedao().getHorses();
		} catch (PersistenceException e) {
			announcePersistenceError(e);
		}

		return horses;
	}

	@Override
	public void createInvoice(Invoice newInvoice)
			throws LessValuesException {

		try {
			if( invoiceval.validateInvoice(newInvoice) ){
				therapyDaoManager.getInvoicedao().createInvoice(newInvoice);
			}else{
				throw new LessValuesException();
			}
		} catch (PersistenceException e) {
			announcePersistenceError(e);
		} catch (NoClassGivenException e) {
			announcePersistenceError(e);
		}
	}

	@Override
	public Invoice getInvoiceinformation(Invoice invoiceid)
			throws NoInvoiceIDException {
		Invoice retInvoice = null;

		try {
			if( invoiceval.validateInvoiceQuery(invoiceid) ){
				retInvoice = therapyDaoManager.getInvoicedao().getSpecificInvoice(invoiceid);
			}else{
				throw new NoInvoiceIDException();
			}
		} catch (PersistenceException e) {
			announcePersistenceError(e);
		} catch (InvoiceNotExistentException e) {
			announcePersistenceError(e);
		}

		return retInvoice;
	}

	@Override
	public List<Invoice> listAllInvoices() {
		List<Invoice> invoices = null;
		
		try {
			invoices = therapyDaoManager.getInvoicedao().getInvoices();
		} catch (PersistenceException e) {
			announcePersistenceError(e);
		}
		
		return invoices;
	}

	public static TherapyManagementService getInstance(){
		return service;
	}
	
	private void announcePersistenceError( Exception e ){
		logger.error("At " + LAYER + " - " + e.getMessage());
	}
	

}
