package sepm.ss13.e0828.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import sepm.ss13.e0828.domain.Horse;
import sepm.ss13.e0828.domain.Horse.Therapytype;
import sepm.ss13.e0828.domain.HorseDeleteData;
import sepm.ss13.e0828.domain.HorseQueryData;

public class DBHorseDAO implements HorseDAO{

	/* ----- constants ------*/
	private static final String STMTCREATE = "Insert into horse(horse_id, horse_name, horse_photo, horse_priceperhour, horse_therapytype, horse_deleted) " +
			"Values(NULL,?,?,?,?,0);";
	private static final String STMTGETALLHORSES = "Select * from horse where horse_deleted = 0";	
	private static final String STMTDELETE = "Update horse set horse_deleted = 1 where horse_id = ?";
	private static final String SELECTSPECHORSE = "Select * from horse where horse_id = ?";
	private static final String[] DBHORSESELECTFIELDS = {"horse_id","horse_name","horse_price", "horse_therapytype"}; 
	
	/* ----- attributes ------*/
	private PreparedStatement pstmt = null;
	private Connection conn = null;
	
	@Override
	public void createHorse(Horse newHorse) throws PersistenceException, NoClassGivenException{

		if( newHorse == null ) throw new NoClassGivenException();
		
		try{
			//TODO LOGGER: Opening Connection
			conn = Connector.getConnection();

			pstmt = conn.prepareStatement(STMTCREATE, Statement.RETURN_GENERATED_KEYS);
			pstmt.setString(1, newHorse.getHorseName());
			pstmt.setString(2, newHorse.getHorsePhoto());
			pstmt.setFloat(3, newHorse.getHorseTherapyprice());
			pstmt.setString(4, newHorse.getHorseTherapytype().getText());
			//TODO LOGGER: executing statement
			pstmt.executeUpdate();

		} catch (SQLException e) {
			if( conn == null ){
				//TODO LOGGER: say connection couldnt be established while creating horse
				throw new PersistenceException("Couldn't connect to datasource!");		
			}

			//TODO LOGGER: Problem with creating statement
			throw new PersistenceException("There was an error creating new Horse!");

		}finally{
			//TODO LOGGER: closing preparedstatement
			try { 
				pstmt.close();
				//TODO LOGGER: closing Connection
				Connector.closeConnection();

			}catch (SQLException e1) {}

			pstmt = null;	
			conn = null;
		}
	}
	
	@Override
	public List<Horse> getHorses() throws PersistenceException{
				
		ResultSet rs = null; List<Horse> retList = null; Horse h = null;
		try{
			//TODO LOGGER: open connection
			conn = Connector.getConnection();
			pstmt = conn.prepareStatement(STMTGETALLHORSES);
			//TODO LOGGER: executing statement
			rs = pstmt.executeQuery();

			if( rs != null ){
				retList = new LinkedList<Horse>();

				while( rs.next() ){
					h = new Horse();
					h.setHorseID(rs.getInt(1));
					h.setHorseName(rs.getString(2));
					h.setHorsePhoto(rs.getString(3));
					h.setHorseTherapyprice(rs.getFloat(4));
					h.setHorseTherapytype(Therapytype.fromString(rs.getString(5)));
					retList.add(h);
				}

			}
		}catch ( SQLException e ){
			if( conn == null ){
				//TODO LOGGER: say connection couldnt be established while creating horse
				throw new PersistenceException("Couldn't connect to datasource!");		
			}

			//TODO LOGGER: Problem with creating statement
			throw new PersistenceException("There was an error getting Horses!");
		}finally{
			//TODO LOGGER: closing preparedstatement
			try { 
				rs.close();				
				pstmt.close();
				//TODO LOGGER: closing Connection
				Connector.closeConnection();
			}catch (SQLException e1) {}

			pstmt = null;	
			conn = null;
		}

		return retList;
	}


	@Override
	public void deleteHorse(HorseDeleteData delHorse) throws PersistenceException, NoClassGivenException, HorseNotExistentException{
		//TODO INFO-LOGGER: Entering deleteion with the data ...
		
		if( delHorse == null ) throw new NoClassGivenException();

		int horseID = delHorse.getHorseID();
		
		try {			
			//TODO LOGGER: open connection
			conn = Connector.getConnection();
			pstmt = conn.prepareStatement(SELECTSPECHORSE);
			pstmt.setInt(1, horseID);
			
			if( !pstmt.executeQuery().next() ){
				pstmt.close();
				pstmt = null;
				
				conn.close();
				throw new HorseNotExistentException("The horse that supposed to delete does not exist!");
			}
			
			pstmt = conn.prepareStatement(STMTDELETE);
			pstmt.setInt(1, horseID);
			//TODO LOGGER: executing statement
			
			pstmt.close();
		} catch (SQLException e) {
			if( conn == null ){
				//TODO LOGGER: say connection couldnt be established while creating horse
				throw new PersistenceException("Couldn't connect to datasource!");		
			}

			//TODO LOGGER: Problem with deleting statement
			throw new PersistenceException("There was an error during deletion of Horse");
		}finally{
			//TODO LOGGER: closing preparedstatement
			try { 
				pstmt.close();
				//TODO LOGGER: closing Connection
				Connector.closeConnection();
			}catch (SQLException e1) {}

			pstmt = null;	
			conn = null;
		}
	}

	
	private String prepareSelectQuery(Object values[]) {
		LinkedList<String> queryparts = new LinkedList<String>() ;
		String query ="";
		
		for( int i = 0; i < ( values.length); i++ ){
			if( values[i] == null ){
				queryparts.add(DBHORSESELECTFIELDS[i] + " = ?");
			}
		}
		
		Iterator<String> it = queryparts.iterator();
		for( int i = 0; i < (queryparts.size() -1); i++ ){
			query = it.next() + " AND ";
		}
		query = it.next() + ";";
		
		return query;
	}

	@Override
	public List<Horse> getHorsesBy(HorseQueryData searchValues)
			throws PersistenceException, NoClassGivenException {
		
		if( searchValues == null ) throw new NoClassGivenException();

		ResultSet rs = null; List<Horse> retList = null; Horse h = null;
		
		try{
			//TODO LOGGER: open connection
			conn = Connector.getConnection();
			Object values[] = searchValues.getValues();
			String query = this.prepareSelectQuery(values);
			//TODO LOGGER: Selecting horses with query;
			pstmt = conn.prepareStatement(query);
			
			int stmtpos =1;
			for( int i = 0; i < values.length;i++ ){
				if( values[i] != null ){
					pstmt.setObject(stmtpos, values[i]);
					stmtpos++;
				}
			}

			//TODO LOGGER: executing statement
			rs = pstmt.executeQuery();

			if( rs != null ){
				retList = new LinkedList<Horse>();

				while( rs.next() ){
					h = new Horse();
					h.setHorseID(rs.getInt(1));
					h.setHorseName(rs.getString(2));
					h.setHorsePhoto(rs.getString(3));
					h.setHorseTherapyprice(rs.getFloat(4));
					h.setHorseTherapytype(Therapytype.fromString(rs.getString(5)));
					retList.add(h);
				}

			}
		}catch ( SQLException e ){
			if( conn == null ){
				//TODO LOGGER: say connection couldnt be established while creating horse
				throw new PersistenceException("Couldn't connect to datasource!");		
			}

			//TODO LOGGER: Problem with creating statement
			throw new PersistenceException("There was an error getting Horses!");
		}finally{
			//TODO LOGGER: closing preparedstatement
			try { 
				rs.close();				
				pstmt.close();
				//TODO LOGGER: closing Connection
				Connector.closeConnection();
			}catch (SQLException e1) {}

			pstmt = null;	
			conn = null;
		}

		return retList;
	}
		
	//TODO UpdateMethod
	@Override
	public void updateHorse(HorseQueryData updateValues) throws PersistenceException, NoClassGivenException{

		try {			
			//TODO LOGGER: open connection
			conn = Connector.getConnection();
			
			//TODO LOGGER: executing statement
			pstmt.executeUpdate();
			pstmt.close();
		} catch (SQLException e) {
			if( conn == null ){
				//TODO LOGGER: say connection couldnt be established while creating horse
				throw new PersistenceException("Couldn't connect to datasource!");		
			}

			//TODO LOGGER: Problem with deleting statement
			throw new PersistenceException("There was an error in deleting the Horse");
		}finally{
			//TODO LOGGER: closing preparedstatement
			try { 
				pstmt.close();
				//TODO LOGGER: closing Connection
				Connector.closeConnection();
			}catch (SQLException e1) {}

			pstmt = null;	
			conn = null;
		}
	}
	
}
