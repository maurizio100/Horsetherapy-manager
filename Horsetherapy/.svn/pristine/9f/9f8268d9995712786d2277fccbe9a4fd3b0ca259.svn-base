package sepm.ss13.e0828.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import sepm.ss13.e0828.dao.exceptions.PersistenceException;
import sepm.ss13.e0828.domain.Invoice;
import sepm.ss13.e0828.domain.TherapyUnit;

public class DBInvoiceDAO implements InvoiceDAO {

/*	private Connection conn = null;
	private PreparedStatement pstmt = null;

	private String createInvoiceStmt = "Insert into Invoice(invoice_id, invoice_date, invoice_clientfname, invoice_clientsname, invoice_address, invoice_postcode, invoice_place) " +
			"Values(NULL,now,?,?,?,?,?);";

	private String createTherapyunitStmt = "Insert into Therapy(therapy_id, horse, invoice, therapy_hour, therapy_price, therapy_type) " +
			"Values(?,?,?,?,?,?)";
	
	private String stmtAllInvoices = "Select * from invoice;";
	private String stmtInvoiceListing = "Select horse_name, therapy_price, therapy_hour, invoice.* from horse, therapy, invoice where horse_id = horse and invoice_id = invoice and invoice_id = ?";
	private String stmtInvoiceSum = "Select sum( therapy_price * therapy_hour) from therapy where invoice = ? group by invoice";
	*/
	@Override
	public void createInvoice(Invoice newInvoice) throws PersistenceException{
		
/*		try {
			conn = Connector.getConnection();
			
			this.createNewInvoice( newInvoice.getInvoice() );
		} catch (SQLException e) {
			// TODO Logger
			conn = null;
			try {
				Connector.closeConnection();
				
				if( !pstmt.isClosed() ){
					pstmt.close();
					pstmt = null;
				}
			} catch (SQLException e1) {}
			throw new PersistenceException("Something went wrong during creation  of Invoice!");
		}
		
		try {
			this.createTherapyunits( newTherapy );
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
	}

/*	private void createNewInvoice( Invoice newInvoice ) throws PersistenceException{
		int key = -1;
		
		pstmt = conn.prepareStatement(createInvoiceStmt, Statement.RETURN_GENERATED_KEYS);
		pstmt.setString(1, newInvoice.getInvoiceClientfirstname());
		pstmt.setString(2, newInvoice.getInvoiceClientsurname());
		pstmt.setString(3, newInvoice.getInvoiceAddress());
		pstmt.setString(4, newInvoice.getInvoicePostcode());
		pstmt.setString(5, newInvoice.getInvoicePlace());
		pstmt.executeUpdate();

		ResultSet rs = pstmt.getGeneratedKeys();
		if( rs != null && rs.next() ) key = rs.getInt(1);

		pstmt.close();
		pstmt = null;

		newInvoice.setInvoiceID(key);
	} */

	
/*	private void createTherapyunits( Therapy newTherapy ) throws SQLException{
		Invoice i = newTherapy.getInvoice();
		List<TherapyUnit> units = newTherapy.getSessions();
		int unit = 0;
		
		pstmt = conn.prepareStatement( createTherapyunitStmt );
		
		for( TherapyUnit tu : units ){
			unit++;
			
			pstmt.setInt(1, unit);
			pstmt.setInt(2, tu.getTherapyHorseID());
			pstmt.setInt(3, i.getInvoiceID());
			pstmt.setFloat(4, tu.getTherapyHours() );
			pstmt.setFloat(5, tu.getTherapyPrice() );
			pstmt.setString(6, tu.getTherapyType().getText() );
			pstmt.executeUpdate();
	
			
		}
		
		pstmt.close();
		pstmt = null;
	}

	@Override
	public List<Therapy> getTherapies() {

		
		return null;
	}*/

}
