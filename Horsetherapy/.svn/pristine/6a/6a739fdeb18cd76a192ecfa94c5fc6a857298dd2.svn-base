package sepm.ss13.e0828.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;

import sepm.ss13.e0828.dao.exceptions.HorseNotExistentException;
import sepm.ss13.e0828.dao.exceptions.NoClassGivenException;
import sepm.ss13.e0828.dao.exceptions.PersistenceException;
import sepm.ss13.e0828.dao.exceptions.UnacceptedValueException;
import sepm.ss13.e0828.dao.helper.DBQueryGenerationHelper;
import sepm.ss13.e0828.domain.Horse;
import sepm.ss13.e0828.domain.Horse.Therapytype;
import sepm.ss13.e0828.domain.HorseDeleteData;
import sepm.ss13.e0828.domain.HorseQueryData;
import org.apache.log4j.Logger;


public class DBHorseDAO implements HorseDAO{

	private Logger logger = Logger.getLogger(DBHorseDAO.class);

	/* ----- Horse entity information --------*/
	private static final String[] DBHORSESELECTFIELDS = {"horse_id","horse_name","horse_price", "horse_therapytype"}; 
	private static final String ENTITYNAME = "horse";

	/* ----- constants ------*/
	private static final String CONNECTERROR = "Couldn't connect to database!";
	private static final String STMTEXECERROR = "Couldn't create or execute Statement!";

	private static final String STMTCREATE = "Insert into horse(horse_id, horse_name, horse_photo, horse_priceperhour, horse_therapytype, horse_deleted) " +
			"Values(NULL,?,?,?,?,0);";
	private static final String STMTGETALLHORSES = "Select * from horse where horse_deleted = 0;";	
	private static final String STMTDELETE = "Update horse set horse_deleted = 1 where horse_id = ?;";
	private static final String SELECTSPECHORSE = "Select * from horse where horse_id = ? and horse_deleted = 0;";

	private static final String SELECTBYTHERAPY = "Select horse_id, horse_name, horse_photo, horse_priceperhour, sum(therapy_hour) as hours " +	 
			"from horse Left Join therapy on horse_id = horse " +
			"where horse_therapytype = ? and horse_deleted = 0 " +
			"group by horse_id, horse_name, horse_photo, horse_priceperhour, horse_therapytype, horse_deleted order by hours asc;";

	private static final String STMTUPDATE ="Update horse set horse_photo = ?, horse_priceperhour = ?, horse_therapytype = ? where horse_id = ?;";	
	/* ----- attributes ------*/
	private PreparedStatement pstmt = null;
	private Connection conn = null;

	@Override
	public void createHorse(Horse newHorse) throws PersistenceException, NoClassGivenException, UnacceptedValueException{

		if( newHorse == null ) throw new NoClassGivenException();
		if( newHorse.getHorseTherapyprice() <= 0 ) throw new UnacceptedValueException();

		try{
			conn = Connector.getConnection();

			String horseName = newHorse.getHorseName();
			String horsePicture = newHorse.getHorsePhoto();
			float horsePrice = newHorse.getHorseTherapyprice();
			String horseTherapytype = newHorse.getHorseTherapytype().getText();

			pstmt = conn.prepareStatement(STMTCREATE, Statement.RETURN_GENERATED_KEYS);
			pstmt.setString(1, horseName);
			pstmt.setString(2, horsePicture);
			pstmt.setFloat(3, horsePrice);
			pstmt.setString(4, horseTherapytype);

			String values = "Horsename: " + horseName + "\n" +
					"Horsephoto: " + horsePicture + "\n" +
					"Horsename: " + horsePrice + "\n" +
					"Horsename: " + horseTherapytype;

			announceStatementExecution(STMTCREATE, values);
			pstmt.executeUpdate();

			ResultSet rs = pstmt.getGeneratedKeys();
			if( rs != null && rs.next() ){
				newHorse.setHorseID(rs.getInt(1));
			}

		} catch (SQLException e) {
			if( conn == null ){
				announceConnectionProblem(e);
				throw new PersistenceException(CONNECTERROR);		
			}

			announceStatementCreationProblem(e);
			throw new PersistenceException(STMTEXECERROR);

		}finally{
			try { 
				if( pstmt != null ) pstmt.close();
				Connector.closeConnection();
			}catch (SQLException e1) {}

			pstmt = null;	
			conn = null;
		}

		announceSuccess();
	}


	@Override
	public List<Horse> getHorses() throws PersistenceException{

		ResultSet rs = null; List<Horse> retList = null; Horse h = null;
		try{
			conn = Connector.getConnection();
			pstmt = conn.prepareStatement(STMTGETALLHORSES);

			announceStatementExecution(STMTGETALLHORSES, null);
			rs = pstmt.executeQuery();

			if( rs != null ){
				retList = new LinkedList<Horse>();

				while( rs.next() ){
					h = new Horse();
					h.setHorseID(rs.getInt(1));
					h.setHorseName(rs.getString(2));
					h.setHorsePhoto(rs.getString(3));
					h.setHorseTherapyprice(rs.getFloat(4));
					h.setHorseTherapytype(Therapytype.fromString(rs.getString(5)));
					retList.add(h);
				}
			}
		}catch ( SQLException e ){
			if( conn == null ){ 
				announceConnectionProblem(e); 
				throw new PersistenceException(CONNECTERROR);
			}

			announceStatementCreationProblem(e);
			throw new PersistenceException(STMTEXECERROR);

		}finally{
			try { 
				if( rs != null ) rs.close();				
				if( pstmt != null ) pstmt.close();
				Connector.closeConnection();
			}catch (SQLException e1) {}

			pstmt = null;	
			conn = null;
		}

		announceSuccess();
		return retList;
	}

	@Override
	public void deleteHorse(HorseDeleteData delHorse) throws PersistenceException, NoClassGivenException, HorseNotExistentException{

		if( delHorse == null ) throw new NoClassGivenException();

		try {			
			conn = Connector.getConnection();
			int horseID = delHorse.getHorseID();

			pstmt = conn.prepareStatement(SELECTSPECHORSE);
			pstmt.setInt(1, horseID);

			if( !pstmt.executeQuery().next() ){
				pstmt.close();
				pstmt = null;

				conn.close();
				throw new HorseNotExistentException();
			}

			pstmt = conn.prepareStatement(STMTDELETE);
			pstmt.setInt(1, horseID);

			announceStatementExecution(STMTDELETE, "" + horseID);
			pstmt.executeUpdate();

		} catch (SQLException e) {
			if( conn == null ){
				announceConnectionProblem(e);
				throw new PersistenceException(CONNECTERROR);		
			}

			announceStatementCreationProblem(e);
			throw new PersistenceException(STMTEXECERROR);

		}finally{
			try { 
				if(pstmt != null )	pstmt.close();
				Connector.closeConnection();
			}catch (SQLException e1) {}

			pstmt = null;	
			conn = null;
		}

		announceSuccess();
	}

	@Override
	public List<Horse> getHorsesBy(HorseQueryData searchValues)
			throws PersistenceException, NoClassGivenException {

		if( searchValues == null ) throw new NoClassGivenException();

		ResultSet rs = null; List<Horse> retList = null; Horse h = null;

		try{
			conn = Connector.getConnection();
			Object arrValues[] = searchValues.getValues();
			String query = new DBQueryGenerationHelper(DBHORSESELECTFIELDS, ENTITYNAME).prepareSelectQuery(arrValues);
			String values = "";


			pstmt = conn.prepareStatement(query);

			int stmtpos =1;
			for( int i = 0; i < arrValues.length;i++ ){
				if( arrValues[i] != null ){
					values += arrValues[i] + " ";
					pstmt.setObject(stmtpos, arrValues[i]);
					stmtpos++;
				}
			}

			announceStatementExecution(query, values);
			rs = pstmt.executeQuery();

			if( rs != null ){
				retList = new LinkedList<Horse>();

				while( rs.next() ){
					h = new Horse();
					h.setHorseID(rs.getInt(1));
					h.setHorseName(rs.getString(2));
					h.setHorsePhoto(rs.getString(3));
					h.setHorseTherapyprice(rs.getFloat(4));
					h.setHorseTherapytype(Therapytype.fromString(rs.getString(5)));
					retList.add(h);
				}

			}
		}catch ( SQLException e ){
			if( conn == null ){
				announceConnectionProblem(e);
				throw new PersistenceException(CONNECTERROR);		
			}

			announceStatementCreationProblem(e);			
			throw new PersistenceException(STMTEXECERROR);

		}finally{
			try { 
				if( rs != null ) rs.close();				
				if( pstmt != null ) pstmt.close();
				Connector.closeConnection();
			}catch (SQLException e1) {}

			pstmt = null;	
			conn = null;
		}

		announceSuccess();
		return retList;
	}

	@Override
	public void updateHorse(Horse updateValues) throws PersistenceException, NoClassGivenException, UnacceptedValueException, HorseNotExistentException{

		if( updateValues == null ) throw new NoClassGivenException();

		String picture = updateValues.getHorsePhoto();
		float price = updateValues.getHorseTherapyprice();
		Therapytype type = updateValues.getHorseTherapytype();
		int horseid = updateValues.getHorseID();

		if( price <= 0 || picture == null || picture.isEmpty() || type == null ) throw new UnacceptedValueException();

		try {			
			conn = Connector.getConnection();
			pstmt = conn.prepareStatement(SELECTSPECHORSE);
			pstmt.setInt(1, horseid);

			if( !pstmt.executeQuery().next() ){
				pstmt.close();
				pstmt = null;

				conn.close();
				throw new HorseNotExistentException();
			}

			pstmt = conn.prepareStatement(STMTUPDATE);
			pstmt.setString(1, picture);
			pstmt.setFloat(2, price);
			pstmt.setString(3, type.getText());
			pstmt.setInt(4, horseid);

			String values = "Picture: " + picture + "\n" +
					"Price: " + price + "\n" +
					"Therapytype: " + type + "\n" +
					"HorseID: " + horseid;

			announceStatementExecution(STMTUPDATE, values);
			pstmt.executeUpdate();
			pstmt.close();
		} catch (SQLException e) {
			if( conn == null ){
				announceConnectionProblem(e);
				throw new PersistenceException(CONNECTERROR);		
			}

			announceStatementCreationProblem(e);
			throw new PersistenceException(STMTEXECERROR);

		}finally{
			try { 
				if( pstmt != null ) pstmt.close();
				Connector.closeConnection();
			}catch (SQLException e1) {}

			pstmt = null;	
			conn = null;
		}		

		announceSuccess();
	}

	@Override
	public List<Horse> getHorsesByUsage(HorseQueryData searchValues)
			throws PersistenceException, NoClassGivenException {

		if( searchValues == null ) throw new NoClassGivenException();

		ResultSet rs = null; List<Horse> retList = null; Horse h = null;

		try{
			conn = Connector.getConnection();
			String therapytype = searchValues.getTherapytype();

			pstmt = conn.prepareStatement(SELECTBYTHERAPY);
			pstmt.setString(1, therapytype);

			announceStatementExecution(SELECTBYTHERAPY, therapytype);
			rs = pstmt.executeQuery();

			if( rs != null ){
				retList = new LinkedList<Horse>();

				while( rs.next() ){
					h = new Horse();
					h.setHorseID(rs.getInt(1));
					h.setHorseName(rs.getString(2));
					h.setHorsePhoto(rs.getString(3));
					h.setHorseTherapyprice(rs.getFloat(4));
					h.setHorseTherapytype(Therapytype.fromString(therapytype));
					retList.add(h);
				}

			}
		}catch ( SQLException e ){
			if( conn == null ){
				announceConnectionProblem(e);
				throw new PersistenceException(CONNECTERROR);		
			}

			announceStatementCreationProblem(e);
			throw new PersistenceException(STMTEXECERROR);

		}finally{
			try { 
				if( rs != null ) rs.close();				
				if( pstmt != null ) pstmt.close();
				Connector.closeConnection();
			}catch (SQLException e1) {}

			pstmt = null;	
			conn = null;
		}

		announceSuccess();
		return retList;
	}

	private void announceConnectionProblem(Exception e){
		logger.error("Couldn't connect to database.");


	}

	private void announceStatementCreationProblem(Exception e) {
		logger.error("There was a Problem during statement creation!");
		StackTraceElement[] eles = e.getStackTrace();
		for( int i = 0; i < eles.length; i ++ ) logger.error(eles[i]);	
	}


	private void announceStatementExecution(String stmt, String values) {
		logger.info("Executing statement: " + stmt );
		if ( values != null ) logger.info("Used values:\n" + values );
	}


	private void announceSuccess() {
		logger.info("Execution of statement successful!");
	}

}
