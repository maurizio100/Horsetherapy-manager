package sepm.ss13.e0828.gui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

import net.miginfocom.swing.MigLayout;
import sepm.ss13.e0828.domain.Horse;
import sepm.ss13.e0828.domain.Horse.Therapytype;
import sepm.ss13.e0828.domain.HorseQueryData;
import sepm.ss13.e0828.service.TherapyManagementService;
import sepm.ss13.e0828.service.exception.NoTherapytypeGivenException;
import sepm.ss13.e0828.gui.HorseManagerConfig;

public class HorseManager extends JPanel {



	private TherapyManagementService servicelayer = null;
	private List<Horse> horses = null;

	/*================UI components======================= */
	/* panels */
	private JPanel panSearch = null;
	private JPanel panSearchField = null;
	private JPanel panSearchControl = null;
	private JPanel panCenter = null;
	private JPanel panEast = null;
	private JScrollPane panHorseList = null;

	/* textfields */
	private JTextField txtSearchName = null;
	private JTextField txtSearchPrice = null;
	private JTextField txtSearchHorseID = null;

	/* labels */
	private JLabel lblSearchName = null;
	private JLabel lblSearchPrice = null;
	private JLabel lblSearchHorseID = null;
	private JLabel lblSearchTherapyType = null;

	/* buttons */
	private JButton btnSearch = null;
	private JButton btnSearchTherapy = null;
	private JButton btnReset = null;

	/* list fields */
	private JComboBox cmbTherapytypes = null;

	/* Table */
	private JTable tabHorselist = null;
	private DefaultTableModel tabModel = null;

	public HorseManager(TherapyManagementService service){
		this.servicelayer = service;
		this.init();
		horses = this.servicelayer.listAllHorses();
		this.fillTableWithData();
	}

	private void init() {

		this.setLayout(new BorderLayout());
		this.add(createCenterPanel(), BorderLayout.CENTER);
		this.add(createEastPanel(), BorderLayout.EAST);


	}

	private JPanel createCenterPanel(){
		if( panCenter == null ){
			panCenter = new JPanel();
			panCenter.setLayout(new BoxLayout(panCenter, BoxLayout.Y_AXIS));

			panCenter.add(createSearchPane());
			panCenter.add(createHorseListPane());
		}
		return panCenter;

	}


	private JPanel createSearchPane(){
		if( panSearch == null ){
			panSearch = new JPanel();
			panSearch.setBorder(BorderFactory.createTitledBorder("Pferdefilter"));
			panSearch.setLayout(new BoxLayout(panSearch, BoxLayout.Y_AXIS));

			panSearch.add( createSearchFieldPane() );
			panSearch.add( createSearchControlPane() );

		}	

		return panSearch;
	}

	private JPanel createSearchFieldPane(){
		if( panSearchField == null ){

			panSearchField = new JPanel( new MigLayout() );

			this.lblSearchHorseID = new JLabel(HorseManagerConfig.LBLHORSEID);
			this.lblSearchName = new JLabel(HorseManagerConfig.LBLHORSENAME);
			this.lblSearchPrice = new JLabel(HorseManagerConfig.LBLHORSEPRICE);
			this.lblSearchTherapyType = new JLabel(HorseManagerConfig.LBLTHERAPYTYPE);


			this.txtSearchHorseID = new JTextField(15);
			this.txtSearchName = new JTextField(15);
			this.txtSearchPrice = new JTextField(15);

			Therapytype[] types = Therapytype.values();
			String strTypes[] = new String[types.length];

			for( int i = 0; i < types.length; i++ ){
				strTypes[i] = types[i].getText();
			}

			this.cmbTherapytypes = new JComboBox(strTypes);

			panSearchField.add(lblSearchHorseID);
			panSearchField.add(txtSearchHorseID);
			panSearchField.add(lblSearchName,"gap unrelated");
			panSearchField.add(txtSearchName,"wrap");
			panSearchField.add(lblSearchPrice);
			panSearchField.add(txtSearchPrice);
			panSearchField.add(lblSearchTherapyType, "gap unrelated");
			panSearchField.add(cmbTherapytypes,"wrap");


		}

		return panSearchField;
	}

	private JPanel createSearchControlPane(){
		if( panSearchControl == null ){
			panSearchControl = new JPanel( new MigLayout() );
			btnReset = new JButton(HorseManagerConfig.BTNRESET);
			btnSearch = new JButton(HorseManagerConfig.BTNSEARCH);
			btnSearchTherapy = new JButton(HorseManagerConfig.BTNSEARCHTHERAPY);

			panSearchControl.add(btnReset,"sg 1");
			panSearchControl.add(btnSearchTherapy,"sg 1");
			panSearchControl.add(btnSearch, "sg 1");


			btnReset.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					// TODO Auto-generated method stub

				}
			});

			btnSearchTherapy.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					HorseQueryData query = new HorseQueryData();
					String o = (String) cmbTherapytypes.getSelectedItem();
					query.setHorseTherapy(Therapytype.fromString(o));
					try {
						horses = servicelayer.listHorsebyTherapy(query);
						refillTable();
					} catch (NoTherapytypeGivenException e1) {
						e1.printStackTrace();
					}

				}
			});

			btnSearch.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					HorseQueryData query = new HorseQueryData();
					//query.setHorseName(txtSearchName.getText());
					query.setHorseID(Integer.parseInt(txtSearchHorseID.getText()));
					horses = servicelayer.searchHorse(query);
					refillTable();
				}
			});


		}

		return panSearchControl;

	}

	private JScrollPane createHorseListPane(){
		if( panHorseList == null ){
			
			tabHorselist =new JTable();
			tabModel = new DefaultTableModel(HorseManagerConfig.HORSELISTHEADERS,0){
				
				@Override
				public boolean isCellEditable(int row, int column){
					return false;
				}
				
			};
			
			tabHorselist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			tabHorselist.setModel(tabModel);
	        tabHorselist.setPreferredScrollableViewportSize(new Dimension(500, 70));
	        tabHorselist.setFillsViewportHeight(true);

	        panHorseList = new JScrollPane(tabHorselist);
		}

		return panHorseList;
	}


	private JPanel createEastPanel(){
		if( panEast == null ){
			panEast = new JPanel();
			panEast.add(new JLabel("EAST"));
		}
		return panEast;
	}

	private void fillTableWithData() {
		
		Object[] values = new Object[HorseManagerConfig.HORSELISTCOLS];

		for( Horse h : horses ){
			values[0] = h.getHorseName();
			values[1] = h.getHorseTherapytype().getText();
			values[2] = h.getHorseTherapyprice();
			values[3] = h.getUsage();
			tabModel.addRow(values);
		}
	}
	
	private void refillTable(){
		tabModel.setRowCount(0);
		fillTableWithData();
	}

}
